{
  "name": "vim-templates",
  "tagline": "create files from templates",
  "body": "# vim-templates\r\nCreate files from predefined templates\r\n\r\n## Installation\r\n### Vundle\r\n```\r\nPlugin 'tibabit/vim-templates'\r\n```\r\n### vim-plug\r\n```\r\nPlug 'tibabit/vim-templates'\r\n```\r\n\r\n# Usage\r\n## Using default templates\r\n- `TemplateInit` - Takes 0 or more arguments, initializes file with the template and expands all placeholders defined in the template.\r\n  The argument provided is the name of the template file, in most cases the extension of the file.\r\n  If no argument is provided file extension is extracted from file name (e.g. ``:TemplateInit cpp``)\r\n\r\n- `TemplateExpand`-  Does not take any argument, expands all the placeholders present in file.\r\n  Helpful for updating an existing file\r\n\r\n## Auto initialization\r\nBy default auto initialization is set to true, so whenever a new file is created,\r\nthe file is automatically initialized if a template matches.\r\nThis can be disabled by setting `g:tmpl_auto_initialize` to `0` in your `.vimrc`.\r\n\r\n# Customization\r\n## Creating your own templates\r\n- Create a file `<template_name>.template` inside a folder which is searched\r\n  by the plugin( [see below](#search-paths)),\r\n  e.g. if you want to create a template file for a c++ main file you\r\n  can name it `cppmain.template` or `cppm.template`\r\n- Open the file and edit, for example\r\n```CPP\r\n/**\r\n * @author\t\t: {{NAME}} ({{EMAIL}})\r\n * @created\t\t: {{TODAY}}\r\n * @filename\t: {{FILE}}\r\n */\r\n\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nint main(int argc, char** argv)\r\n{\r\n\treturn 0;\r\n}\r\n```\r\n- `{{NAME}}`, `{{EMAIL}}`, `{{FILE}}` and `{{TODAY}}`\r\ndefined above are placeholders, which are expanded as soon as you call\r\n``:TemplateExpand``.\r\n- In a new file type ``:TemplateInit cppmain`` to both place the above\r\n  content inside the file and expand the placeholders.\r\n\r\n\r\n### Search paths\r\nThe plugin searches for templates as follows\r\n\r\n1. In folders named `templates` recursively up the directory tree,\r\n   i.e. first in a directory `templates` under the current working\r\n   directory, then in `../templates`, then '../../templates', ...\r\n2. In search paths defined by `g:tmpl_search_paths` in your `.vimrc` file\r\n3. The `templates` folder in this plugin's directory\r\n\r\nIf you want to add a custom directory to the search path,\r\ne.g. if you placed them inside a ``templates`` directory under ``$HOME`` then\r\nadd the following line in your ``.vimrc`` file:\r\n```\r\nset g:tmpl_search_paths = ['~/templates']\r\n```\r\n\r\n### Configuring the placeholder values\r\n- The values into which certain placeholders expand may be influenced\r\n  by settings in your `.vimrc`. For example `PROJECT` expands into the\r\n  value of the variable `g:tmpl_project`. For more details see the\r\n  list below.\r\n- Other than that the expansion may also be influenced on a per-directory basis.\r\n  If a matching template file is found in one of the directories of the\r\n  search path, the plugin also checks whether a file called `tmpl_settings.vim`\r\n  exists in the *same* directory. Note, than *no other* search directories\r\n  are checked.\r\n  If this is the case all its settings take preference over the ``.vimrc``\r\n- For example: In general you want the placeholder ``EMAIL`` to expand to\r\n  ``john.doe@example.com`` in your templates, hence you place\r\n  ```\r\n  let g:tmpl_author_email = 'john.doe@example.com'\r\n  ```\r\n  in your ``.vimrc``.   \r\n  In the projects inside the folder `$HOME/my_cool_stuff`, however,\r\n  you want your templates to show the email address ``johns_projects@example.com``.\r\n  So inside ``$HOME/templates`` you place a file ``$HOME/my_cool_stuff/tmpl_settings.vim``\r\n  with content\r\n  ```\r\n  let g:tmpl_author_email = 'johns_projects@example.com'\r\n  ```\r\n  and all template files in ``$HOME/my_cool_stuff`` will now have `EMAIL`\r\n  expanding to the latter value.\r\n\r\n### Placeholders\r\nThe Following placeholders are currently supported by this plugin\r\n\r\n#### Date & Time\r\n- `DAY` : Day of the week in short form (Mon, Tue, Wed, etc,)\r\n- `DAY_FULL` : Day of the week in full (Monday, Tueseday, etc.)\r\n- `DATE` : Date of the month (01 to 31)\r\n- `MONTH`: Month of the year (01 to 12)\r\n- `MONTH_SHORT` : Short name of the month (Jan, Feb, Mar, etc.)\r\n- `MONTH_FULL` : Full month name (January, February, etc.)\r\n- `YEAR` : current year (2016)\r\n- `TODAY`: Todays date in dd/mm/yyyy format\r\n- `TIME` : Current time in 24 our format\r\n- `TIME_12` : Current time in 12 hour format\r\n- `TIMESTAMP` : Current Timestamp, e.g.: Sunday Nov 27, 2016 15:33:33 IST \r\n\r\n#### Authoring\r\n- `NAME` : Name of the author, `g:tmpl_author_name`, default : `$USER`\r\n- `HOSTNAME` : Name of the host machine, `g:tmpl_author_hostname`, default : `$HOSTNAME`\r\n- `EMAIL` : Email of the author, `g:tmpl_author_email`, default : `$USER@$HOSTNAME`\r\n\r\n#### File name\r\n- `FILE` : Basename of the file `filename.ext -> filename`\r\n- `FILEE` : Filename with extension `filename.ext -> filename.ext`\r\n- `FILEF` : Absolute path of the file `/path/to/directory/filename.ext`\r\n- `FILER` : Filepath relative to the current directory (pwd)`/relative/to/filename.ext`\r\n\r\n#### License and Copyright\r\n- `LICENSE` : License of the project, `g:tmpl_license`, default : `MIT`\r\n- `COPYRIGHT` : Copyright message, `g:tmpl_copyright`, default : `Copyright (c) g:tmpl_company`\r\n\r\n#### Others\r\n- `PROJECT` : Name of the project, `g:tmpl_project`, default: not expanded\r\n- `COMPANY` : Name of the company, `g:tmpl_company`, default: not expanded\r\n- `MACRO_GUARD` : Macro guard for use in c/c++ files. `filename.h -> FILENAME_H`. All dots(.) and dashes (-) present in filename are converted into underscores (_).\r\n- `MACRO_GUARD_FULL` : Same as `MACRO_GUARD`, except relative path is used in place of file name. e.g. `relative/to/filename.h -> RELATIVE_TO_FILENAME_H`\r\n- `CLASS` : class name, same as `FILE`\r\n- `CURSOR` : This is a spacial placeholder, it does not expand into anything but the cursor is placed at this location after the template expansion\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}